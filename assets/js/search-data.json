{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://salad-bowl-of-knowledge.github.io/hp/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://salad-bowl-of-knowledge.github.io/hp/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "グリッド細胞の発火パターンをPythonで可視化する",
            "content": "&#27010;&#35201; . Edvard Moser博士の研究室が公開している、グリッド細胞の活動をPythonで可視化してみました。データはhttps://www.ntnu.edu/kavli/research/grid-cell-dataからダウンロードできます。 . コードを書く上でhttp://felix11h.github.io/blog/grid-cell-rate-mapsを参考にしました。一部の関数はこのブログから引用しています。今回は上記のサイトで実装されていない、Gaussian kernelを用いたSmoothed rate mapとAutocorrelation mapの実装をしてみます。 . Important: 著者はGrid cellsの研究をしていません。実際の研究で用いられるコードと異なる可能性があります。 . &#12464;&#12522;&#12483;&#12489;&#32048;&#32990;(Grid Cells)&#12395;&#12388;&#12356;&#12390; . 実装とは関係ないですが、グリッド細胞についてまとめておきます。 . &#31354;&#38291;&#22522;&#24213;&#12392;&#12375;&#12390;&#12398;&#12464;&#12522;&#12483;&#12489;&#32048;&#32990; . 詳しくは場所細胞 - 脳科学辞典や2014年のノーベル生理学・医学賞の解説（神経科学学会）、Grid cells (Scholarpedia)などをお読みいただければと思います。簡単にまとめると、海馬には場所特異的に発火する場所細胞(place cell)があり、これはO&#39;keefe博士によって発見されました。次にMay-Britt Moser博士とEdvard Moser博士は六角形格子状の場所受容野を持つグリッド細胞(格子細胞, grid cell)を内側嗅内皮質(medial entorhinal cortex; MEC)で発見しました。この3人は2014年のノーベル生理学・医学賞を受賞しています。 . . http://www.scholarpedia.org/article/Grid_cellsより。左図の黒線はラットの経路、赤は発火が生じた位置。右図は発火率マップ(rate map)。 . 最近、外側膝状体背側核(dorsal lateral geniculate nucleus)で場所細胞が見つかったそうです（V Hok, et al., 2018, bioRxiv）。 . &#12487;&#12540;&#12479;&#12395;&#12388;&#12356;&#12390; . 公開されているデータはMatLabのmatファイル形式です。しかし、scipy.io.loadmatを用いることでpythonでデータの中身を取得することができます。 . 使用するデータは以下の通りです。 . 10704-07070407_POS.mat | 10704-07070407_T2C3.mat | . これらのファイルはhttps://archive.norstore.no/pages/public/datasetDetail.jsf?id=8F6BE356-3277-475C-87B1-C7A977632DA7からダウンロードできるファイルの一部です。ただし全体で2.23GBあるので、簡単に試したい場合は上記のリンクからダウンロードしてください。以下では./data/grid_cells_data/ディレクトリの下にファイルを置いています。 . データの末尾の&quot;POS&quot;と&quot;T2C3&quot;の意味について説明しておきます。まず、&quot;POS&quot;はpost, posx, posyを含む構造体でそれぞれ試行の経過時間、x座標, y座標です。座標は-50~50で記録されています。恐らく1m四方の正方形の部屋で、原点を部屋の中心としているのだと思います。&quot;T2C3&quot;はtがtetrode（テトロード電極）でcがcell（細胞）を意味します。後ろの数字は番号付けたものと思われます。 . Smoothed Rate Map&#12395;&#12388;&#12356;&#12390; . 発火率$ lambda( boldsymbol{x})$は、場所$ boldsymbol{x}=(x,y)$で記録されたスパイクの回数を、場所$ boldsymbol{x}$における滞在時間(s)で割ることで得られます。 $$ lambda( boldsymbol{x})= frac{ displaystyle sum_{i=1}^n g left( frac{ boldsymbol{s}_i- boldsymbol{x}}{h} right)}{ displaystyle int_0^T g left( frac{ boldsymbol{y}(t)- boldsymbol{x}}{h} right)dt} $$ ただし、$n$はスパイクの回数、$T$は計測時間、$g( cdot)$はGaussain Kernel（中身の分子が平均、分母が標準偏差）、$ boldsymbol{s}_i$は$i$番目のスパイクの発生した位置、$ boldsymbol{y}(t)$は時刻$t$でのラットの位置です。分母は積分になっていますが、実際には離散的に記録をするので、累積和に変更し、$dt$を時間のステップ幅(今回は0.02s)とします。 . Gaussian Kernelを用いて平滑化することで「10cm四方での発火を同じ位置での発火とする」などとした場合よりも、得られるマップは滑らかになります。 . &#23455;&#35013; . まず、ライブラリをインポートしてデータを読み込みます。 . import numpy as np import matplotlib.pyplot as plt from scipy import io as io from tqdm import tqdm # from http://www.ntnu.edu/kavli/research/grid-cell-data pos = io.loadmat(&#39;./data/grid_cells_data/10704-07070407_POS.mat&#39;) spk = io.loadmat(&#39;./data/grid_cells_data/10704-07070407_T2C3.mat&#39;) . posファイル内の構造は次のようになっています。 . pos[&quot;post&quot;]: times at which positions were recorded | pos[&quot;posx&quot;]: x positions | pos[&quot;posy&quot;]: y positions | spk[&quot;cellTS&quot;]: spike times | . 次に種々の関数を実装します。 . def nearest_pos(array, value): k = (np.abs(array - value)).argmin() return k . def GaussianKernel(sizex, sizey, sigma=0.5, center=None): &quot;&quot;&quot; sizex : kernel width sizey : kernel height sigma : gaussian Sd center : gaussian mean return gaussian kernel &quot;&quot;&quot; x = np.arange(0, sizex, 1, float) y = np.arange(0, sizey, 1, float) x, y = np.meshgrid(x,y) if center is None: x0 = sizex // 2 y0 = sizey // 2 else: if np.isnan(center[0])==False and np.isnan(center[1])==False: x0 = center[0] y0 = center[1] else: return np.zeros((sizey,sizex)) return np.exp(-((x-x0)**2 + (y-y0)**2) / 2*sigma**2) . def smoothed_rate_map(pos, spk, kernel_sigma=0.1, W=100, H=100): # load datas posx = pos[&quot;posx&quot;].flatten() posy = pos[&quot;posy&quot;].flatten() spkt = spk[&quot;cellTS&quot;].flatten() #change positions range: -50 ~ 50 -&gt; 0 ~ H or W posx = (posx + 50) / 100 * W posy = (posy + 50) / 100 * H # find nearest positions when spikes occur indx = [nearest_pos(pos[&quot;post&quot;],t) for t in spkt] indy = [nearest_pos(pos[&quot;post&quot;],t) for t in spkt] # occup position while trajectory occup_m_list = [] for i in tqdm(range(len(posx))): occup_m_list.append(GaussianKernel(W, H, kernel_sigma, (posx[i], posy[i]))) occup_m = sum(occup_m_list) occup_m *= 0.02 # one time step is 0.02s occup_m[occup_m==0] = 1 # avoid devide by zero # activation activ_m_list = [] for i in tqdm(range(len(spkt))): activ_m_list.append(GaussianKernel(W, H, kernel_sigma, (posx[indx][i] ,posy[indy][i]))) activ_m = sum(activ_m_list) rate_map = activ_m / occup_m return rate_map . 最後に実行します。 . rm = smoothed_rate_map(pos, spk, 0.2, 100, 100) plt.figure(figsize=(6,4)) plt.imshow(rm, cmap=&quot;jet&quot;) plt.colorbar(label=&quot;Hz&quot;) plt.gca().invert_yaxis() plt.tight_layout() # plt.savefig(&quot;smoothed_rate_map.png&quot;) plt.show() . 100%|██████████████████████████████████████████████████████████████████████████| 30000/30000 [00:09&lt;00:00, 3306.34it/s] 100%|█████████████████████████████████████████████████████████████████████████████| 2326/2326 [00:02&lt;00:00, 959.91it/s] . Autocorrelation Map&#12395;&#12388;&#12356;&#12390; . https://core.ac.uk/download/pdf/30859910.pdfのSupporting Online Materialに書いてある式通りに実装してみましたが、遅い＆論文と見た目が全く異なるので、scipy.signal.correlate2dを使いました。 . from scipy.signal import correlate2d rm = smoothed_rate_map(pos, spk, 0.5, 100, 100) a_corr = correlate2d(rm, rm, fillvalue=5) plt.figure(figsize=(6,4)) plt.imshow(a_corr, cmap=&quot;jet&quot;) plt.colorbar(label=&quot;Autocorrelation&quot;) plt.tight_layout() # plt.savefig(&quot;autocorr.png&quot;) plt.show() . 100%|██████████████████████████████████████████████████████████████████████████| 30000/30000 [00:16&lt;00:00, 1795.03it/s] 100%|█████████████████████████████████████████████████████████████████████████████| 2326/2326 [00:02&lt;00:00, 929.87it/s] . 若干論文と図が異なる上、cross-correlationが-1~1の範囲でないのはおかしい気がするのですが、六角形格子が見えているので良しとします。 . &#21442;&#32771;&#12395;&#12375;&#12383;&#25991;&#29486;&#12539;&#12469;&#12452;&#12488; . https://github.com/Felix11H/grid_cell_rate_map | https://www.ntnu.edu/kavli/research/grid-cell-data | https://core.ac.uk/download/pdf/30859910.pdfのSupporting Online Material | https://github.com/MattNolanLab/gridcells | https://arxiv.org/pdf/1810.07429.pdf | .",
            "url": "https://salad-bowl-of-knowledge.github.io/hp/neurosciece/2018/11/23/grid_cells.html",
            "relUrl": "/neurosciece/2018/11/23/grid_cells.html",
            "date": " • Nov 23, 2018"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Us",
          "content": "山拓：神経科学の研究をしています。 Github : https://github.com/takyamamoto | 凪：理学部（）と工学部（）がいるので人間科学部（）になってみる今日このごろ | ざっきぃ：ライフワークはクラシック音楽鑑賞。しばらく統計から離れて医学に集中します。 | 優曇華院：数理物理学者． | みこ：音楽バカ。医者になるのはフルートを吹くため | .",
          "url": "https://salad-bowl-of-knowledge.github.io/hp/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "神経科学",
          "content": "神経表現の可視化 . グリッド細胞の発火パターンをPythonで可視化する | スパイクトリガー平均・共分散の計算法 (Python) | ネコLGN細胞のスパイクトリガー平均による受容野解析 | Sorted plotの注意点 | . 解剖・形態学 . NibabelとMayaviによるMR画像の可視化 | 脳が対側支配をする進化的な利点は何か | . 色覚 . RGBからXYZ, LMS色空間への変換 | CIELUV色相環をPythonで描画する | . 強化学習 . Distributional Reinforcement Learningの仕組み | . 計算神経科学 . 古典的モデル . FitzHugh-Nagumoモデルをアニメーションで見る | Hodgkin-Huxleyモデルをアニメーションで見る | 心臓刺激伝導系の数理モデルのPythonでのシミュレーション | . ニューラルネットワークと神経科学 . 予測符号化 (predictive coding) とは何か | 掛け算のニューラルネットワークとベイズ推定 | 『人工神経回路で脳を理解する』論文まとめ | ニューラルネットワークにおける意味発達の数学理論 | Spiking Neural UnitをChainerで実装してみた | 物体認識のためのRecurrent CNNまとめ | FORCE法によるRecurrent Spiking Neural Networksの教師あり学習 | 人工神経回路による脳の理解はどこまで進んだか | . Computational neuroscience (Coursera) . Computational neuroscience : Week0 | Computational neuroscience : Week1 | Computational neuroscience : Week2 | Computational neuroscience : Week3 | .",
          "url": "https://salad-bowl-of-knowledge.github.io/hp/neuroscience/",
          "relUrl": "/neuroscience/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "機械学習",
          "content": "最適化 . [線形計画法（シンプレックス法）入門　PDFファイル] . Hamiltonian Descent Methodsの実装についての解説 . Boltzmann Generatorsの解説 . Deep Learning . Chainer . Chainerで学習率のスケジューリングをする方法 . ChainerでPredNetの実装をしてみた . TensorFlow . tensorflow-gpuとCUDAのバージョン . Keras . Kerasにおける中間層の出力の可視化 . KerasによるGraph Convolutional Networks . Kerasにおいてforループでmodelを定義する . Keras examples directoryで実装例を見る . KerasのconvLSTM2Dの使用例を見る . 強化学習 . OpenAI Gymでオリジナルの環境を作る . Kerasを用いたDQNでFlappyBirdを学習させる .",
          "url": "https://salad-bowl-of-knowledge.github.io/hp/machine-learning/",
          "relUrl": "/machine-learning/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "統計学",
          "content": "Pythonで統計処理 . 分散共分散行列を相関行列/偏相関係数に変換 . Graph Lassoによる変数間の関係のグラフ化 . Pythonで線形回帰モデルの計算（１） . Pythonで線形回帰モデルの計算（２） . Pythonで正規分布の区間推定 . PythonでGaussian Fitting . scipyによる1次元混合ガウス回帰 . matplotlibのみで線形回帰の信頼区間を描画する . matplotlibで棒グラフ間の有意差の描画をする . Pythonによる分位点回帰 (Quantile regression) . 確率論 . 確率モデル . 確率過程とランダムウォーク . マルコフ連鎖 (Markov chain) . 確率分布 . q分位数と中央値 . 確率変数の変換 . デルタ法 (Delta method) . 統計的推定・検定 . 比率の区間推定 . ピアソンのカイ二乗検定 (Pearson chi-squared test) . スチューデントのt検定 (Student t-test) . ノンパラメトリック検定 . ケンドールの一致係数(Kendall’s coefficient of concordance) . 統計解析 . 回帰分析 . 重回帰分析① . 重回帰分析② . 正規方程式 . ロジスティック回帰分析 . 対数オッズ比の分散 . データ分析 . Principle Curve 入門 . PythonによるPrincipal Curveの実装 (bendingアルゴリズム) . 稲垣宣生 「数理統計学」演習問題の解答 . 書いたものをあげます。 . 演習問題1 . 演習問題2 . 演習問題3 . 演習問題4 . 演習問題5 . 演習問題6 . 演習問題7 . 演習問題8 . 演習問題9 . 演習問題10 . 演習問題11 . 演習問題12 . 演習問題13 . 演習問題14 . 統計検定 . 統計検定1級の対策 . 統計検定2級のフィードバック（前編） . 統計検定2級のフィードバック（後編） .",
          "url": "https://salad-bowl-of-knowledge.github.io/hp/statistics/",
          "relUrl": "/statistics/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

}